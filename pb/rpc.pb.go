// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type PutData struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	StoreId              uint32   `protobuf:"fixed32,2,opt,name=StoreId,proto3" json:"StoreId,omitempty"`
	StackId              uint32   `protobuf:"fixed32,3,opt,name=StackId,proto3" json:"StackId,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Mime                 string   `protobuf:"bytes,5,opt,name=Mime,proto3" json:"Mime,omitempty"`
	FileData             []byte   `protobuf:"bytes,6,opt,name=FileData,proto3" json:"FileData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutData) Reset()         { *m = PutData{} }
func (m *PutData) String() string { return proto.CompactTextString(m) }
func (*PutData) ProtoMessage()    {}
func (*PutData) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *PutData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutData.Unmarshal(m, b)
}
func (m *PutData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutData.Marshal(b, m, deterministic)
}
func (m *PutData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutData.Merge(m, src)
}
func (m *PutData) XXX_Size() int {
	return xxx_messageInfo_PutData.Size(m)
}
func (m *PutData) XXX_DiscardUnknown() {
	xxx_messageInfo_PutData.DiscardUnknown(m)
}

var xxx_messageInfo_PutData proto.InternalMessageInfo

func (m *PutData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PutData) GetStoreId() uint32 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *PutData) GetStackId() uint32 {
	if m != nil {
		return m.StackId
	}
	return 0
}

func (m *PutData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PutData) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *PutData) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

type NeedlePb struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	StoreId              uint32   `protobuf:"fixed32,2,opt,name=StoreId,proto3" json:"StoreId,omitempty"`
	StackId              uint32   `protobuf:"fixed32,3,opt,name=StackId,proto3" json:"StackId,omitempty"`
	Offset               uint32   `protobuf:"fixed32,4,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Flags                uint32   `protobuf:"fixed32,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Size                 uint32   `protobuf:"fixed32,7,opt,name=Size,proto3" json:"Size,omitempty"`
	Mime                 string   `protobuf:"bytes,8,opt,name=Mime,proto3" json:"Mime,omitempty"`
	CheckSum             uint32   `protobuf:"fixed32,9,opt,name=CheckSum,proto3" json:"CheckSum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NeedlePb) Reset()         { *m = NeedlePb{} }
func (m *NeedlePb) String() string { return proto.CompactTextString(m) }
func (*NeedlePb) ProtoMessage()    {}
func (*NeedlePb) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *NeedlePb) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NeedlePb.Unmarshal(m, b)
}
func (m *NeedlePb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NeedlePb.Marshal(b, m, deterministic)
}
func (m *NeedlePb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeedlePb.Merge(m, src)
}
func (m *NeedlePb) XXX_Size() int {
	return xxx_messageInfo_NeedlePb.Size(m)
}
func (m *NeedlePb) XXX_DiscardUnknown() {
	xxx_messageInfo_NeedlePb.DiscardUnknown(m)
}

var xxx_messageInfo_NeedlePb proto.InternalMessageInfo

func (m *NeedlePb) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NeedlePb) GetStoreId() uint32 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *NeedlePb) GetStackId() uint32 {
	if m != nil {
		return m.StackId
	}
	return 0
}

func (m *NeedlePb) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *NeedlePb) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *NeedlePb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NeedlePb) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *NeedlePb) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *NeedlePb) GetCheckSum() uint32 {
	if m != nil {
		return m.CheckSum
	}
	return 0
}

type Node struct {
	Id                   uint32   `protobuf:"fixed32,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NodeStatus struct {
	Capacity             uint64   `protobuf:"varint,1,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	Used                 uint64   `protobuf:"varint,2,opt,name=Used,proto3" json:"Used,omitempty"`
	FileCount            uint32   `protobuf:"fixed32,3,opt,name=FileCount,proto3" json:"FileCount,omitempty"`
	StartTs              uint64   `protobuf:"varint,4,opt,name=StartTs,proto3" json:"StartTs,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStatus) Reset()         { *m = NodeStatus{} }
func (m *NodeStatus) String() string { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()    {}
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *NodeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStatus.Unmarshal(m, b)
}
func (m *NodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStatus.Marshal(b, m, deterministic)
}
func (m *NodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus.Merge(m, src)
}
func (m *NodeStatus) XXX_Size() int {
	return xxx_messageInfo_NodeStatus.Size(m)
}
func (m *NodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus proto.InternalMessageInfo

func (m *NodeStatus) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *NodeStatus) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *NodeStatus) GetFileCount() uint32 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (m *NodeStatus) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *NodeStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*PutData)(nil), "pb.PutData")
	proto.RegisterType((*NeedlePb)(nil), "pb.NeedlePb")
	proto.RegisterType((*Node)(nil), "pb.Node")
	proto.RegisterType((*NodeStatus)(nil), "pb.NodeStatus")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcf, 0x6a, 0xe3, 0x30,
	0x10, 0xc6, 0x23, 0xaf, 0xe3, 0x3f, 0xb3, 0x21, 0x07, 0xb1, 0x04, 0x61, 0xf6, 0x60, 0xcc, 0xc2,
	0xfa, 0x94, 0xc3, 0xee, 0x23, 0xa4, 0x04, 0x7c, 0x68, 0x1a, 0xe4, 0x96, 0x9e, 0x65, 0x6b, 0xd2,
	0x9a, 0x24, 0xb5, 0xb1, 0xe5, 0x42, 0x7b, 0x2f, 0xf4, 0xda, 0x77, 0xeb, 0x03, 0x15, 0xc9, 0x7f,
	0x92, 0xdc, 0x7b, 0xfb, 0xbe, 0xf9, 0xc6, 0xd2, 0xfc, 0xe4, 0x01, 0xbf, 0xae, 0xf2, 0x65, 0x55,
	0x97, 0xaa, 0xa4, 0x56, 0x95, 0x45, 0x1f, 0x04, 0xdc, 0x6d, 0xab, 0xae, 0x84, 0x12, 0x74, 0x0e,
	0x56, 0x22, 0x19, 0x09, 0x49, 0x6c, 0x73, 0x2b, 0x91, 0x94, 0x81, 0x9b, 0xaa, 0xb2, 0xc6, 0x44,
	0x32, 0x2b, 0x24, 0xb1, 0xcb, 0x07, 0xdb, 0x25, 0x22, 0xdf, 0x27, 0x92, 0xfd, 0x18, 0x12, 0x63,
	0x29, 0x05, 0x7b, 0x23, 0x8e, 0xc8, 0xec, 0x90, 0xc4, 0x3e, 0x37, 0x5a, 0xd7, 0xae, 0x8b, 0x23,
	0xb2, 0x69, 0x57, 0xd3, 0x9a, 0x06, 0xe0, 0xad, 0x8b, 0x03, 0xea, 0x7b, 0x99, 0x13, 0x92, 0x78,
	0xc6, 0x47, 0x1f, 0x7d, 0x12, 0xf0, 0x36, 0x88, 0xf2, 0x80, 0xdb, 0xec, 0x5b, 0x86, 0x5a, 0x80,
	0x73, 0xb3, 0xdb, 0x35, 0xa8, 0xcc, 0x58, 0x2e, 0xef, 0x1d, 0xfd, 0x05, 0xd3, 0xf5, 0x41, 0x3c,
	0x34, 0x66, 0x32, 0x97, 0x77, 0x66, 0x44, 0x70, 0x2e, 0x11, 0xd2, 0xe2, 0x15, 0x99, 0x6b, 0x1a,
	0x8d, 0x1e, 0xb1, 0xbc, 0x4b, 0xac, 0xd5, 0x23, 0xe6, 0xfb, 0xb4, 0x3d, 0x32, 0xdf, 0xf4, 0x8e,
	0x3e, 0x5a, 0x80, 0xbd, 0x29, 0x25, 0x9e, 0x11, 0xb9, 0x9a, 0x28, 0x7a, 0x27, 0x00, 0x3a, 0x48,
	0x95, 0x50, 0x6d, 0x63, 0x8e, 0x10, 0x95, 0xc8, 0x0b, 0xf5, 0xd2, 0x63, 0x8f, 0x5e, 0x5f, 0x79,
	0xd7, 0x60, 0x47, 0x6e, 0x73, 0xa3, 0xe9, 0x6f, 0xf0, 0xf5, 0xcb, 0xad, 0xca, 0xf6, 0x49, 0xf5,
	0xe0, 0xa7, 0x42, 0xff, 0x28, 0xb5, 0xba, 0x6d, 0x0c, 0xbb, 0xcd, 0x07, 0x3b, 0x62, 0x4e, 0x4f,
	0x98, 0xff, 0xde, 0x08, 0x00, 0xaf, 0xf2, 0x14, 0xeb, 0xe7, 0x22, 0x47, 0x1a, 0x83, 0x7f, 0x5f,
	0x17, 0x0a, 0xf5, 0x71, 0xf4, 0xe7, 0xb2, 0xca, 0x96, 0xfd, 0xaa, 0x04, 0x33, 0x6d, 0x86, 0x7f,
	0x14, 0x4d, 0xe8, 0x5f, 0xf0, 0x38, 0x0a, 0x69, 0x1a, 0x2f, 0xb2, 0xe0, 0xfc, 0xb3, 0x68, 0x42,
	0xff, 0x80, 0xd3, 0x73, 0x7a, 0xa6, 0xad, 0x94, 0x18, 0xcc, 0x07, 0xd5, 0x25, 0xd1, 0x24, 0x73,
	0xcc, 0x82, 0xfe, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x06, 0x3e, 0xdb, 0xad, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcServiceClient is the client API for RpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcServiceClient interface {
	// Sends a greeting
	WriteFile(ctx context.Context, in *PutData, opts ...grpc.CallOption) (*NeedlePb, error)
	ReadFile(ctx context.Context, in *NeedlePb, opts ...grpc.CallOption) (*PutData, error)
	Status(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeStatus, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) WriteFile(ctx context.Context, in *PutData, opts ...grpc.CallOption) (*NeedlePb, error) {
	out := new(NeedlePb)
	err := c.cc.Invoke(ctx, "/pb.RpcService/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) ReadFile(ctx context.Context, in *NeedlePb, opts ...grpc.CallOption) (*PutData, error) {
	out := new(PutData)
	err := c.cc.Invoke(ctx, "/pb.RpcService/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) Status(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, "/pb.RpcService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServiceServer is the server API for RpcService service.
type RpcServiceServer interface {
	// Sends a greeting
	WriteFile(context.Context, *PutData) (*NeedlePb, error)
	ReadFile(context.Context, *NeedlePb) (*PutData, error)
	Status(context.Context, *Node) (*NodeStatus, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RpcService/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).WriteFile(ctx, req.(*PutData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeedlePb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RpcService/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).ReadFile(ctx, req.(*NeedlePb))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RpcService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).Status(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteFile",
			Handler:    _RpcService_WriteFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _RpcService_ReadFile_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RpcService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
